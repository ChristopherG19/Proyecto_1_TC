def symbol(self, symbol):
        Estado_A = self.countStates
        self.countStates += 1
        Estado_B = self.countStates
        self.states.add(Estado_A)
        self.states.add(Estado_B)
            
        self.stackAFN.push((Estado_A, symbol, Estado_B))
        return ((Estado_A, Estado_B))
        
    def concatExp(self, ElA, ElB, s1, s2=None):
        if not s2:
            if ElA == 'No hay elementos':
                temp = [ElB[0], s1, ElB[1]]
                trans = [str(x) for x in temp]
                if (trans not in self.transitions):
                    self.transitions.append(trans)
            
            else:
                temp = [ElA[0], s1, ElA[1]]
                trans = [str(x) for x in temp]
                if (trans not in self.transitions):
                    self.transitions.append(trans)
        
        if ElA == 'No hay elementos':
            temp = [ElB[0], s1, ElB[1]]
            temp2 = [ElB[0], s2, ElB[1]]
            
            trans = [str(x) for x in temp]
            trans2 = [str(x) for x in temp2]
            if (trans not in self.transitions and trans2 not in self.transitions):
                self.transitions.append(trans)
                self.transitions.append(trans2)
            
        else:
            temp = [ElA[0], s1, ElA[1]]
            temp2 = [ElB[0], s2, ElB[1]]
            
            trans = [str(x) for x in temp]
            trans2 = [str(x) for x in temp2]
            if (trans not in self.transitions and trans2 not in self.transitions):
                self.transitions.append(trans)
                self.transitions.append(trans2)
            
        self.stackAFN.push(ElB)

        
    def unionExp(self, ElA, ElB):
        #anvorguesa
        Start = ElA[0]
        self.countStates -= 1
        ElA[0] = self.countStates
        self.countStates += 1
        ElA[1] = self.countStates
        
        End = 6
        
        
        temp = [Start, '$', ElA[0]+1]
        temp2 = [ElB[0], s2, ElB[1]]
                    
        
        self.concatExp((Estado_A, Estado_B), ElA, '$')
        self.concatExp((Estado_A, Estado_B), ElB, '$')
        self.concatExp(ElA, ElB)
        
       
    def closureExp(self):
        0
        
    def PrintResults(self):
        print("\nInfix Expression:", self.expression)
        print("PostFix Expression:", self.postfixExp)
        print("Estados: ", self.states)
        print("Simbolos: ", self.symbols)
        #print("Inicio: ", self.initialState)
        #print("Aceptacion: ", self.acceptState)
        self.printT()
           
    def printT(self):